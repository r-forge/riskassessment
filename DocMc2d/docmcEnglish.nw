%% LyX 1.5.6 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[10pt,french,english]{article}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\usepackage{geometry}
\geometry{verbose,letterpaper,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{url}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{setspace}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
%% Because html converters don't know tabularnewline
\providecommand{\tabularnewline}{\\}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
\usepackage{noweb}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.


\makeatother

\usepackage{babel}
\addto\extrasfrench{\providecommand{\og}{\leavevmode\flqq~}\providecommand{\fg}{\ifdim\lastskip>\z@\unskip\fi~\frqq}}

\begin{document}

\title{The {}``\texttt{mc2d}'' package. }


\author{Régis POUILLOT, Marie-Laure DELIGNETTE-MULLER \& Jean-Baptiste DENIS}

\maketitle
\tableofcontents{}

\noindent \begin{center}
\vfill{}

\par\end{center}

This documentation is intended for readers with:

\begin{itemize}
\item A medium level in R. Please refer to the Manual {}``An Introduction
to R'' available with R distribution if needed;
\item Some knowledge about Monte-Carlo simulations (its basic principles
and its utility) and about Quantitative Risk Assessment (QRA). 
\end{itemize}
This documentation will not described all arguments of the functions.
The reference remains the documentation attached to the package. 


\section{Introduction}


\subsection{What is \texttt{mc2d}?}

{}``\texttt{mc2d}'' means Two-Dimensional Monte-Carlo (\emph{{}``Monte-Carlo
à Deux Dimensions''}). This package :

\begin{itemize}
\item provides additional distributions;
\item provides tools to build One-Dimensional and Two-Dimensional Monte-Carlo
Simulations;
\item provides tools to study One-Dimensional and Two-Dimensional Monte-Carlo
Simulations.
\end{itemize}
In a previous version, some tools to fit parametric distributions
to data were included. These functions being useful for other purposes,
they have been placed in a specific package called \texttt{specdist}.
These packages are available at the URL \url{http://w3.jouy.inra.fr/unites/miaj/public/matrisq/jbdenis/outils/welcome.html},
and soon on the CRAN: \url{http://lib.stat.cmu.edu/R/CRAN/}. 

\texttt{mc2d} was built for QRA in the Food Safety domain but it might
be used for other domains. 


\subsection{What is Two-Dimensional Monte-Carlo Simulation (briefly)?}

The following text and Figure \ref{fig:Mc2d} are adapted from \cite{POUILLOT-2004}
and \cite{POUILLOT-2007} where this method was used. The major reference
for Two-Dimensional Monte-Carlo simulations remains \cite{CULLEN-FREY-1999}. 

According to international recommendations, a QRA should reflect the
{}``variability'' of the risk and estimate the {}``uncertainty''
of the risk estimate. The {}``variability'' represents the temporal,
geographical and/or individual heterogeneity of the risk for a given
population. The {}``uncertainty'' is understood as the lack of perfect
knowledge of the QRA model structure and parameters.

In order to estimate the natural {}``variability'' of the risk,
a Monte-Carlo simulation approach may be useful: the empirical distribution
of the risk within the population may be estimated from the mathematical
combination of distributions reflecting the variability of parameters
in the population.

In order to estimate the {}``uncertainty'' of the risk estimates
issued from data uncertainty, a two-dimensional (or second-order)
Monte-Carlo simulation was proposed \cite{CULLEN-FREY-1999}. A two-dimensional
Monte-Carlo simulation is a Monte-Carlo simulation where the alea
reflectiong \char`\"{}variability\char`\"{} and the alea reflecting
\char`\"{}uncertainty\char`\"{} are transfered separately in the simulation,
so that \char`\"{}variability\char`\"{}and \char`\"{}uncertainty\char`\"{}
of the output may be estinated separately. It may be described as
following (see Figure \ref{fig:Mc2d}): 

\begin{enumerate}
\item The parameters of the model should be divided in three categories:
the parameters whose alea reflects {}``variability only'', hereinafter
denoted as {}``variable parameters'', the parameters whose alea
reflects {}``uncertainty only'', denoted as {}``uncertain parameters''
and the parameters whose alea reflects uncertainty and variability.
For this latter category, a hierarchical structure, using {}``hyper-parameters'',
should be specified: if a parameter is uncertain and variable, one
should be able to specify an empirical or parametric distribution
reflecting variability only conditionally on other parameters known
with uncertainty. As an example, one should be able to set a structure
as $X\left|a,b\right.\sim N\left(a,b\right)$, this normal distribution
reflecting variability of $x$ conditionally to $a$ and $b$, with,
e.g., $a\sim Unif\left(l_{a},u_{a}\right)$and $b\sim Unif\left(l_{b},u_{b}\right)$,
these distributions reflecting the uncertainty around the parameters
$a$ and $b$;
\item A set of uncertain parameters are randomly sampled from their respective
distributions; 
\item The QRA is performed using a classical (one-dimensional) Monte-Carlo
simulation of size $N_{v}$, conditionally to these uncertain parameters
considered as fixed. This QRA takes into account the variability of
all variable parameters, and leads to an empirical density function
reflecting the variability of exposure/risk among the population conditionally
to the uncertain parameters. Various statistics (\emph{e.g.} the mean,
the standard deviation, some percentiles) of the resulting empirical
density are evaluated and stored; 
\item Steps 2) and 3) are performed a large number of time ($N_{u}$ times),
leading to $N_{u}$ set of statistics; 
\item As output, the $50^{\text{th}}$ percentile (median) of each statistic
is used to establish an estimate of this statistic; the $2.5^{\text{th}}$
and $97.5^{\text{th}}$ percentiles of each statistic are used to
establish a 95\% credible interval (CI95) of this statistic. The median
of the $N_{u}$ estimated values for each of the 101 estimated percentiles
allows us to represent a {}``variability cumulative distribution''
using a graph. This curve is surrounded by the 2.5th and 97.5th percentiles
obtained from the $N_{u}$ estimates of each of the 101 percentiles.
\end{enumerate}
%
\begin{figure}
\noindent \begin{centering}
\includegraphics[scale=0.5]{mc2dSaumon}
\par\end{centering}

\caption{\selectlanguage{french}%
\label{fig:Mc2d}Shematic Representation of a Two-Dimensional Monte-Carlo
Simulation.\selectlanguage{english}
}

\end{figure}


\char`\"{}\texttt{mc2d}\char`\"{} is a set of R functions that will
help to develop such two-dimensional Monte-Carlo simulations. The
main difference with the procedure described above is that \texttt{mc2d}
will use arrays of (at least) two dimensions to derive the results:
the first dimension will reflect variability, the second will reflect
uncertainty. This document will not develop further the method, but
the practical use of \texttt{mc2d}, based on a fictive example.


\subsection{\label{sec:Exemple1}A basic example}

\textbf{Quantitative Risk Assessment:} \textbf{\emph{Escherichia coli}}
\textbf{O157:H7 infection linked to the consumption of frozen ground
beef in <3 year old children.}

\begin{itemize}
\item We assume that, in a given batch of ground beef, \emph{E. coli} O157:H7
are randomly distributed with a mean concentration of $c=10$ bacteria
(cfu) per gram of product;
\item We assume that no bacterial growth occurs, since the product is kept
frozen until cooked, just before consumption;
\item 2.7\% of consumers cook their beef {}``rare'', 37.3\% {}``medium''
and 60.0\% {}``well cooked''; 
\item The following inactivation $i$ is associated to these cooking practices: 

\begin{itemize}
\item No inactivation for {}``rare'' cooking;
\item 1/5 surviving bacteria for a {}``medium'' cooking;
\item 1/50 surviving bacteria for a {}``well done'' cooking.
\end{itemize}
\item The variability distribution of steak serving sizes $s$ for <3 year
children was estimated in a consumption survey. The {}``best fit''
was obtained using a gamma distribution with parameters: $shape=3.93,\: rate=0.0806$.
\item The dose-response relationship, describing the probability of illness
$P$ according to the dose is a one hit model. The probability of
illness per hit $r$ is assumed to be constant and $r=0.001$.
\end{itemize}
The question is: {}``\emph{What is the distribution of the risk of
illness in the population that consumed the contaminated lot?}''

This distribution will be estimated using Monte-Carlo simulations
performed using R with the {}``\texttt{mc2d}'' package. First, the
model will be developed in a one dimensional framework. Then, including
some uncertainties in the model, it will be derived in a two dimensional
framework. 


\subsubsection{One Dimensional Monte-Carlo Simulation}

In a first step, we assume that no uncertainty exists in our model.
All distributions reflects variability. The model may be written as:\begin{eqnarray*}
c & = & 10.\\
i & \sim & emp\left(\left\{ 1,1/5,1/50\right\} ,\left\{ 0.027,0.373,0.600\right\} \right)\\
s & \sim & gamma\left(3.93,0.0806\right)\\
n & \sim & Poisson\left(c\times i\times s\right)\\
P & = & 1-\left(1-0.001\right)^{n}\end{eqnarray*}


where $emp\left(\boldsymbol{X},\boldsymbol{P}\right)$ is the empirical
distribution where each value $X_{i}$ is associated to the probability
$P_{i}$.We will use a \char`\"{}classical\char`\"{} one dimensional
Monte-Carlo simulation, with 1000 iterations. Using the {}``\texttt{mc2d}''
package, the model may be written as:

<<sh0, echo=false>>=
set.seed(666)
@

<<sh1, echo=true>>=
library(mc2d)
ndvar(1000)
conc <- 10
cook <- mcstoc(rempiricalD, values=c(1,1/5,1/50), prob=c(0.027,0.373,0.600))
serving <- mcstoc(rgamma,shape=3.93,rate=0.0806)
expo <- conc * cook * serving
dose <- mcstoc(rpois,lambda=expo)
r <- 0.001
risk <- 1-(1-r)^dose
EC1 <- mc(cook,serving,expo,dose,risk)
print(EC1)
summary(EC1)
@

This One-Dimensional Monte-Carlo simulation provides an estimates
of the mean risk (around 5\%), as well as some quantiles of the risk
(2.5\% of the population has a risk of illness greater than 20.3\%). 


\subsubsection{Two dimensional Monte-Carlo Simulation}

Assume now that:

\begin{itemize}
\item The mean concentration of bacteria in the batch is not known with
certainty. It was an estimate. Microbiologists think that the uncertainty
around this estimate might be reflected through a normal distribution
with parameters $\mu=10$ and $\sigma=2$;
\item Epidemiological studies suggest that the $r$ parameter is known with
uncertainty. The uncertainty around the mean value 0.001 may be reflected
through a uniform distribution bounded within 0.0005 and 0.0015. 
\end{itemize}
The model could then be written as:\begin{eqnarray*}
c & \sim & N\left(10,2\right)\\
i & \sim & emp\left(\left\{ 1,1/5,1/50\right\} ,\left\{ 0.027,0.373,0.600\right\} \right)\\
s & \sim & gamma\left(3.93,0.0806\right)\\
n & \sim & Poisson\left(c\times i\times s\right)\\
r & \sim & Unif\left(0.0005,0.0015\right)\\
P & = & 1-\left(1-r\right)^{n}\end{eqnarray*}


Nevertheless, the distributions of $r$ and $c$ do not reflect the
same kind of alea then do the distributions of $i$ and $s$. $r$
and $c$ are uncertain, while $i$ and $s$ are variable. $n$, as
a function of $c$, $i$ and $s$ will be variable \emph{and} uncertain.

We will use a two dimensional Monte-Carlo simulation, with 1000 iterations
in the variability dimension and 100 iterations in the uncertainty
dimension. Using the {}``\texttt{mc2d}'' package, the model may
be written as:

<<sh2, echo=true>>=
ndunc(100)
conc <- mcstoc(rnorm,type="U",mean=10,sd=2)
cook <- mcstoc(rempiricalD, type="V",values=c(1,1/5,1/50), prob=c(0.027,0.373,0.600))
serving <- mcstoc(rgamma,type="V",shape=3.93,rate=0.0806)
expo <- conc * cook * serving
dose <- mcstoc(rpois,type="VU",lambda=expo)
r <- mcstoc(runif,type="U",min=0.0005,max=0.0015)
risk <- 1-(1-r)^dose
EC2 <- mc(conc,cook,serving,expo,dose,r,risk)
EC2
summary(EC2)
@

Note that the syntax is similar. Nevertheless, for each distribution,
a {}``\texttt{type}'' argument is provided, indicating if the parameter
distribution reflects uncertainty (\texttt{type}=\char`\"{}\texttt{U}\char`\"{}),
variability (\texttt{type}=\char`\"{}V\char`\"{}), or both (\texttt{type}=\char`\"{}\texttt{VU}\char`\"{}).

The summary now provides estimates of the variability distribution
(in row) but with a measure of their uncertainty, linked to the uncertainty
around \texttt{conc} and \texttt{r}. The estimate of the mean risk
is now known with uncertainty. The median of the 100 simulations lead
to a \char`\"{}best estimate\char`\"{}of 0.0445, with a \char`\"{}credible
interval\char`\"{} of {[}0.191, 0.0730].


\section{Basic Principles and Functions}

A classical session of R using {}``\texttt{mc2d}'' is as following:

\begin{itemize}
\item From data, expert knowledge, \emph{etc.} empirical or parametric distributions
are chosen for each {}``parents'' parameters. For data fitting,
the {}``\texttt{specdist}'' package is recommended;
\item For each parameter, an \texttt{mcnode} object is built (key functions:
\texttt{mcdata, mcstoc}); 
\item Various \texttt{mcnode} objects are grouped in a \texttt{mc} object
(key function: \texttt{mc}).
\item The \texttt{mc} object is studied through summaries, graphs, sensitivity
analysis (key functions: \texttt{summary.mc}, \texttt{plot.mc}, \texttt{tornado},
\texttt{tornadounc}).
\end{itemize}

\subsection{Before All}

The {}``\texttt{mc2d}'' library should be loaded during your R session
(\char`\"{}\texttt{library(mc2d)}\char`\"{}).

The default size of the Monte-Carlo Simulation should be defined using
the \texttt{ndvar()} function (dimension of variability) and the \texttt{ndunc()}
function (dimension of uncertainty).


\subsection{The \texttt{mcnode} Object as an Elementary Object.}


\subsubsection{\texttt{mcnode} Object Structure}

An \texttt{mcnode} object is the basic element of an \texttt{mc} object.
It is an array of dimension $\left(nsv\times nsu\times nvariates\right)$
where $nsv$ is the dimension of variability, $nsu$ is the dimension
of uncertainty and $nvariates$ is the number of variates of the \texttt{mcnode}%
\footnote{In this section, we will only consider \texttt{mcnode} with $nvariates=1$.%
}. Four types of \texttt{mcnode} exist: 

\begin{itemize}
\item \char`\"{}\texttt{V}\char`\"{} \texttt{mcnode}, for \char`\"{}\emph{Variability}\char`\"{},
are arrays of dimension $\left(nsv\times1\times nvariates\right)$.
The alea in the data reflects variability of the parameter; 
\item \char`\"{}\texttt{U}\char`\"{} \texttt{mcnode}, for \char`\"{}\emph{Uncertainty}\char`\"{},
are arrays of dimension $\left(1\times nsu\times nvariates\right)$.
The alea in the data reflects uncertainty of the parameter. 
\item \char`\"{}\texttt{VU}\char`\"{} \texttt{mcnode}, for \char`\"{}\emph{Variability
and Uncertainty}\char`\"{}, are arrays of dimension $\left(nsv\times nsu\times nvariates\right)$.
The alea in the data reflects separated variability (in the first
dimension) and uncertainty (in the second dimension) of the parameter. 
\item Additionally, \char`\"{}\texttt{0}\char`\"{} \texttt{mcnode} are defined
for some use. \char`\"{}\texttt{0}\char`\"{} stand for \char`\"{}Neither
Variability or Uncertainty\char`\"{}. They are arrays of dimension
$\left(1\times1\times nvariates\right)$. No alea is considered for
these nodes. \char`\"{}\texttt{0}\char`\"{} \texttt{mcnode} are not
necessary in the univariate context (use scalar instead) but are useful
to build multivariate nodes (See section \ref{sec:Multivar}). 
\end{itemize}
%
\begin{figure}
\noindent \begin{centering}
\includegraphics[scale=0.4]{Illustration}
\par\end{centering}

\caption{\selectlanguage{french}%
\label{fig:Structure}Structure of the various \texttt{mcnode} objects.\selectlanguage{english}
}

\end{figure}


There are 5 ways to build a \texttt{mcnode} object:

\begin{enumerate}
\item The \texttt{mcstoc} function builds \texttt{mcnode} from random generating
functions;
\item The \texttt{mcdata} function fills \texttt{mcnode} from data sets; 
\item \texttt{mcnode} are built directly from operations on \texttt{mcnode}
objects;
\item \texttt{mcprobtree} is a special function that builds an \texttt{mcnode}
from various \texttt{mcnode} using a probability tree;
\item Some functions, as {}``\texttt{==}'' or {}``\texttt{>}'' , \texttt{is.na},
\texttt{is.finite} build an \texttt{mcnode} when applied to an \texttt{mcnode}.
\end{enumerate}

\subsubsection{\label{sub:mcstoc}The \texttt{\textmd{mcstoc}} function}

The \texttt{mcstoc} function is written as%
\footnote{as classically in R, most of arguments have logical default values
and will be infrequently modified.%
}:

\begin{singlespace}
\noindent \begin{flushleft}
\texttt{mcstoc(func=runif, type=c(\char`\"{}V\char`\"{}, \char`\"{}U\char`\"{},
\char`\"{}VU\char`\"{}, \char`\"{}0\char`\"{}), ..., nsv=ndvar(),
nsu=ndunc(), nvariates=1, outm=\char`\"{}each\char`\"{}, nsample=\char`\"{}n\char`\"{},
seed=NULL, rtrunc=FALSE, linf=-Inf, lsup=Inf, lhs=FALSE)}
\par\end{flushleft}
\end{singlespace}

\begin{itemize}
\item \texttt{func} is a function providing random data or its name as character.
The table \ref{tab:Distributions} provides available distributions
from the \texttt{stats} and the \texttt{mc2d} libraries that can be
used in \texttt{mcstoc}; 
\item \texttt{type} is the type of requested \texttt{mcnode}. By default,
\texttt{mcstoc} builds a {}``\texttt{V}'' \texttt{mcnode};
\item \ldots{} are the arguments to be passed to the function \texttt{func},
with the exception of the argument providing the size of the sample.
This latter is calculated by the function according to \texttt{func},
\texttt{type}, \texttt{nsv,} \texttt{nsu} and \texttt{nvariates}.
If the name of the argument specifying the size of the sample is not
\texttt{n} (\emph{e.g.} functions \texttt{rhyper} and \texttt{rwilcox},
see table \ref{tab:Distributions}), the name of this parameter should
be provided in the \texttt{nsample} argument. \emph{Note that all
following arguments should be named};
\item \texttt{nsv} and \texttt{nsu} are the number of values needed in the
variability and the uncertainty dimension, respectively. By default,
these values are the one provided by \texttt{ndvar()} and \texttt{ndunc()},
respectively;
\item \texttt{nvariates} is the desired number of variates in the \texttt{mcnode};
\item \texttt{outm} is the default output for multivariate nodes;
\item \texttt{seed} optionally specify a seed for the random generator;
\item \texttt{rtrunc} allows to truncate the distribution between \texttt{linf}
and \texttt{lsup}. This function is not valid for all distributions
(see table \ref{tab:Distributions}). See the \texttt{rtrunc} function
help for further details;
\item \texttt{lhs} allows to sample the node in a Latin Hypercube Sampling
framework. This function is not valid for all distributions (see table
\ref{tab:Distributions}). See the \texttt{lhs} function help for
further details. 
\end{itemize}
%
\begin{table}
\caption{\selectlanguage{french}%
\label{tab:Distributions}Available distributions\selectlanguage{english}
}


\begin{centering}
\begin{tabular}{|c|c|c|c|c|c|c|}
\hline 
Package & Distribution & function & \multicolumn{1}{c|}{Parameter \texttt{n}} & Other Parameters & trunc & lhs\tabularnewline
\hline
\hline 
\texttt{stats} & beta & \texttt{rbeta} & \texttt{n} & \texttt{shape1, shape2, ncp} & Y & Y\tabularnewline
\hline
 & binomial & \texttt{rbinom} & \texttt{n} & \texttt{size, prob} & Y & Y\tabularnewline
\hline 
 & Cauchy & \texttt{rcauchy} & \texttt{n} & \texttt{location, scale} & Y & Y\tabularnewline
\hline 
 & chi-squared & \texttt{rchisq} & \texttt{n} & \texttt{df, ncp} & Y & Y\tabularnewline
\hline 
 & exponential & \texttt{rexp} & \texttt{n} & \texttt{rate} & Y & Y\tabularnewline
\hline 
 & F & \texttt{rf} & \texttt{n} & \texttt{df1, df2, ncp} & Y & Y\tabularnewline
\hline 
 & gamma & \texttt{rgamma} & \texttt{n} & \texttt{shape, rate (or scale)} & Y & Y\tabularnewline
\hline 
 & geometric & \texttt{rgeom} & \texttt{n} & \texttt{prob} & Y & Y\tabularnewline
\hline 
 & hypergeometric & \texttt{rhyper} & \texttt{nn} & \texttt{m, n, k} & Y & Y\tabularnewline
\hline 
 & lognormal & \texttt{rlnorm} & \texttt{n} & \texttt{meanlog, sdlog} & Y & Y\tabularnewline
\hline 
 & logistic & \texttt{rlogis} & \texttt{n} & \texttt{location, scale} & Y & Y\tabularnewline
\hline 
 & negative binomial & \texttt{rnbinom} & \texttt{n} & \texttt{size, prob (or mu)} & Y & Y\tabularnewline
\hline 
 & normal & \texttt{rnorm} & \texttt{n} & \texttt{mean, sd} & Y & Y\tabularnewline
\hline 
 & Poisson & \texttt{rpois} & \texttt{n} & \texttt{lambda} & Y & Y\tabularnewline
\hline 
 & Student's t & \texttt{rt} & \texttt{n} & \texttt{df, ncp} & Y & Y\tabularnewline
\hline 
 & uniform & \texttt{runif} & \texttt{n} & \texttt{min, max} & Y & Y\tabularnewline
\hline 
 & Weibull & \texttt{rweibull} & \texttt{n} & \texttt{shape, scale} & Y & Y\tabularnewline
\hline
 & Wilcoxon & \texttt{rwilcox} & \texttt{nn} & \texttt{m,n} & Y & Y\tabularnewline
\hline 
\texttt{mc2d} & Bernoulli & \texttt{rbern} & \texttt{n} & \texttt{prob} & Y & Y\tabularnewline
\hline 
 & empirical discrete & \texttt{rempiricalD} & \texttt{n} & \texttt{values, prob} & Y & Y\tabularnewline
\hline
 & PERT & \texttt{rpert} & \texttt{n} & \texttt{min, mode, max, shape} & Y & Y\tabularnewline
\hline
 & triangular & \texttt{rtriang} & \texttt{n} & \texttt{min, mode, max} & Y & Y\tabularnewline
\hline
 & generalised beta & \texttt{rbetagen} & \texttt{n} & \texttt{shape1,shape2,min,max,ncp} & Y & Y\tabularnewline
\hline
 & multinomial & \texttt{rmultinomial} & \texttt{n} & \texttt{n, size, prob} & N & N\tabularnewline
\hline
 & Dirichlet & \texttt{rdirichlet} & \texttt{n} & \texttt{alpha} & N & N\tabularnewline
\hline
 & multinormal & \texttt{rmultinormal} & \texttt{n} & \texttt{mean, sigma} & N & N\tabularnewline
\hline
\end{tabular}
\par\end{centering}
\end{table}


In our basic example, \texttt{mcstoc} was used to specify \texttt{conc}
(a normal distribution), \texttt{cook} (an empirical discrete distribution),
\texttt{serving} (a gamma distribution), and \texttt{dose} (a Poisson
distribution). Note that the argument \texttt{lambda} of the Poisson
distribution (node \texttt{dose}) is an \texttt{mcnode}.

<<sh3, echo=true, eval=FALSE>>=
conc <- mcstoc(rnorm,type="U",mean=10,sd=2)
cook <- mcstoc(rempiricalD, type="V",values=c(1,1/5,1/50), prob=c(0.027,0.373,0.600))
serving <- mcstoc(rgamma,type="V",shape=3.93,rate=0.0806)
...
dose <- mcstoc(rpois,type="VU",lambda=expo)
r <- mcstoc(runif,type="U",min=0.0005,max=0.0015)
...
@

A normal distribution with parameters $mean=2$, $sd=3$, truncated
on {[}1.5, 2] with a Latin Hypercube Sampling could be written%
\footnote{Note that the mean and the standard deviation of the Gaussian distribution
are not kept due to the truncation.%
}:

<<sh3bis, echo=true, eval=true>>=
x <- mcstoc(rnorm, mean=2, sd=3, rtrunc=TRUE, linf=1.5, lsup=2, lhs=TRUE)
summary(x)
@

For your use in \texttt{mcstoc}, additionnal distributions have been
implemented: the Bernoulli distribution (\texttt{rbern}), the empirical
discrete distribution (\texttt{rempiricalD}), the PERT distribution
(\texttt{rpert})\cite{VOSE-2000}, the triangular distribution (\texttt{rtriang}),
the Dirichlet distribution (\texttt{rdirichlet}) and the multinormal
distribution (\texttt{rmultinormal}). The multinomial distribution
has been adapted (vectorized): \texttt{rmultinomial} (library \texttt{mc2d})
should be used in place of \texttt{rmultinom} (library \texttt{stats}).
The empirical discrete (\emph{e.g.} for bootstrap), the Dirichlet,
the multinomial and the multinormal may be used with uncertain and/or
variable parameters using multivariate nodes. See section \ref{sec:Multivar}.


\subsubsection{\label{sub:mcnode}The \texttt{\textmd{mcdata}} function}

Another way to build \texttt{mcnode} object is \emph{via} the \texttt{mcdata}
function, when the data are available.

\begin{singlespace}
\noindent \begin{flushleft}
\texttt{mcdata(data, type=c(\char`\"{}V\char`\"{}, \char`\"{}U\char`\"{},
\char`\"{}VU\char`\"{}, \char`\"{}0\char`\"{}), nsv=ndvar(), nsu=ndunc(),
nvariates=1, outm=\char`\"{}each\char`\"{})}
\par\end{flushleft}
\end{singlespace}

\noindent \begin{flushleft}
See the documentation associated to this function to see the size/mode
of data that can be used to specify an \texttt{mcnode}. The following
example place a \texttt{TRUE} value in a \char`\"{}\texttt{U}\char`\"{}
node in half of the simulations:
\par\end{flushleft}

<<sh3, echo=true>>=
nu <- ndunc()
tmp <- (1:nu) > (nu/2)
mcdata(tmp,type="U")
@


\subsubsection{Operations on \texttt{mcnode}}

\texttt{mcnode}s are automatically built using operations on \texttt{mcnode}.
Rules are built to transfer coherently uncertainty and variability
within the model. Logically, the rules are as following (illustrated
here with a {}``+'')%
\footnote{These rules are not classical R rules of recycling.%
}:

\begin{itemize}
\item \char`\"{}\texttt{0}\char`\"{} + \char`\"{}\texttt{0}\char`\"{} =
\char`\"{}\texttt{0}\char`\"{};
\item \char`\"{}\texttt{0}\char`\"{} + \char`\"{}\texttt{V}\char`\"{} =
\char`\"{}\texttt{V}\char`\"{}
\item \char`\"{}\texttt{0}\char`\"{} + \char`\"{}\texttt{U}\char`\"{} =
\char`\"{}\texttt{U}\char`\"{};
\item \char`\"{}\texttt{0}\char`\"{} + \char`\"{}\texttt{VU}\char`\"{} =
\char`\"{}\texttt{VU}\char`\"{};
\item \char`\"{}\texttt{V}\char`\"{} + \char`\"{}\texttt{V}\char`\"{} =
\char`\"{}\texttt{V}\char`\"{};
\item \char`\"{}\texttt{V}\char`\"{} + \char`\"{}\texttt{U}\char`\"{} =
\char`\"{}\texttt{VU}\char`\"{}: the {}``\texttt{U}'' mcnode is
recycled by row, the \char`\"{}\texttt{V}\char`\"{} mcnode is recycled
classically by column;
\item \char`\"{}\texttt{V}\char`\"{} + \char`\"{}\texttt{VU}\char`\"{} =
\char`\"{}\texttt{VU}\char`\"{}: the {}``\texttt{V}'' mcnode is
recycled classically by column;
\item \char`\"{}\texttt{U}\char`\"{} + \char`\"{}\texttt{U}\char`\"{} =
\char`\"{}\texttt{U}\char`\"{};
\item \char`\"{}\texttt{U}\char`\"{} + \char`\"{}\texttt{VU}\char`\"{} =
\char`\"{}\texttt{VU}\char`\"{}: the {}``\texttt{U}'' mcnode is
recycled by row;
\item \char`\"{}\texttt{VU}\char`\"{} + \char`\"{}\texttt{VU}\char`\"{}
= \char`\"{}\texttt{VU}\char`\"{}
\end{itemize}
Thus, in our example:

<<sh4, echo=true, eval=false>>=
...
expo <- conc * cook * serving
...
risk <- 1-(1-r)^dose
@

\texttt{expo} is function of a {}``\texttt{U}'' and two {}``\texttt{V}''
\texttt{mcnode}: it is a {}``\texttt{VU}'' \texttt{mcnode} with
the variability dimension in row and the uncertainty dimension in
column. \texttt{risk} is a function of a {}``\texttt{U}'' and a
{}``\texttt{VU}'' node: it is a {}``\texttt{VU}'' node.


\subsubsection{\label{sub:The-mcprobtree-function}The \texttt{\textmd{mcprobtree}}
function}

The \texttt{mcprobtree} function should be used if a {}``probability
tree'' is needed to build an \texttt{mcnode}. Assume that the distribution
reflecting the uncertainty on \texttt{conc} was not sure, and that
the microbiologists suggest that they are 75\% confident that $conc\sim N\left(10,2\right)$
but that they are 25\% confident that $conc\sim U\left(8,12\right)$.
This could be written using \texttt{mcprobtree} as%
\footnote{an alternative for \texttt{whichdist} could be \texttt{whichdist <-
mcstoc(rempiricalD, type=\char`\"{}U\char`\"{}, values=c(0,1), prob=c(75,25))}%
}:

<<sh4, echo=true, eval=true>>=
conc1 <- mcstoc(rnorm,type="U",mean=10,sd=2)
conc2 <- mcstoc(runif,type="U",min=8,max=12)
whichdist <- mcstoc(rbern,type="U",prob=0.25)
concbis <- mcprobtree(whichdist,list("0"=conc1,"1"=conc2),type="U")
@

\texttt{mcprobtree} could also be used to provide a mixture distribution
in the variability dimension.


\subsubsection{Other functions to build \texttt{mcnode}}

The functions {}``\texttt{==}'', ''\texttt{<}'', ''\texttt{<}='',
''\texttt{>=}'', {}``\texttt{>}'', provides an \texttt{mcnode}
when applied on a \texttt{mcnode}.

Special functions \texttt{is.na(x)}, \texttt{is.nan(x)}, \texttt{is.finite(x)},
\texttt{is.infinite(x)} are implemented to test if any values are
\texttt{NA} (missing data), \texttt{NaN} ({}``\emph{Not A Number}''),
finite or not. 

<<sh5, echo=true, eval=true>>=
cook < 1
tmp <- log(mcstoc(runif,min=-1,max=1))
tmp
is.na(tmp)
@


\subsubsection{Building correlation between \texttt{mcnode}}

Structural links between set of parameters may be very important in
QRA. In \texttt{mc2d}, a correlation structure (in the sense of Spearman)
implying 2 or more nodes may be built with the \texttt{cornode} function.
This function use the Iman \& Conover method \cite{IMAN-CONOVER-1982}.
Assume that a study suggests that people that eat their ground beef
\char`\"{}rare\char`\"{} eat bigger serving sizes. We could build
this relation using:

<<sh5bis, echo=true, eval=true>>=
cornode(cook,serving,target=0.5,result=TRUE) 
@

Note that the resulting correlation (around 0.4) is obviously an approximation
in this case, where a discrete distribution (\texttt{cook}: 3 categories)
is correlated to a continuous distribution (\texttt{serving}). 

It is possible to create such correlation between {}``V'' nodes,
between {}`` U'' nodes, between {}``VU'' nodes or between one
{}``V'' node and some {}``VU'' nodes.

The use of a multinormal distribution (\texttt{rmultinormal}) is another
way to create such relationship between nodes.


\subsection{The \texttt{mc} Object}

Once your \texttt{mcnode} objects are built, one should group them
in a single object to study the Monte-Carlo results. The {}``\texttt{mc}''
object is a list of \texttt{mcnode}. There are three ways to build
a \texttt{mc} object: using the \texttt{mc} function, the \texttt{evalmcmod}
function or within the \texttt{evalmccut} function. 


\subsubsection{The \texttt{mc} Function}

\noindent \texttt{mc(..., name=NULL, devname=FALSE)}

\ldots{} are \texttt{mcnode} or \texttt{mc} objects to be gathered
in a \texttt{mc} object. \texttt{mc} value is an \texttt{mc} object
with specific methods, e.g. \texttt{print} or \texttt{summary}. In
our example, we used:

<<sh6, echo=true, eval=false>>=
...
EC2 <- mc(conc,cook,serving,expo,dose,r,risk)
print(EC2)
summary(EC2)
@


\subsubsection{The \texttt{mcmodel} and the \texttt{evalmcmod} Functions}

A model may be written in one step using \texttt{mcmodel} (just a
wrap of your model in a function), and then evaluated using \texttt{evalmcmod}.
These functions may be used once your model is correct and tested
using a small number of iterations. For our example: 

<<sh10, echo=true, eval=true>>=
modelEC3 <- mcmodel({
  conc <- mcstoc(rnorm,type="U",mean=10,sd=2)
  cook <- mcstoc(rempiricalD, type="V",values=c(1,1/5,1/50),
    prob=c(0.027,0.373,0.600))
  serving <- mcstoc(rgamma,type="V",shape=3.93,rate=0.0806)
  r <- mcstoc(runif,type="U",min=0.0005,max=0.0015)
  expo <- conc * cook * serving
  dose <- mcstoc(rpois,type="VU",lambda=expo)
  risk <- 1-(1-r)^dose
  mc(conc,cook,serving,expo,dose,r,risk)
})
modelEC3
@

Note that:

\begin{itemize}
\item the model is wrapped between {}``\texttt{\{}'' and {}``\texttt{\}}'';
\item any (valid) R code may be placed in the model%
\footnote{If needed, it is possible to make reference to the simulation dimensions
using \texttt{ndvar()} and/or \texttt{ndunc()}.%
};
\item The model should end by an \texttt{mc()} function\texttt{.}
\end{itemize}
The model is then evaluated using the \texttt{evalmcmod} function: 

\noindent \begin{flushleft}
\texttt{evalmcmod(expr, nsv=ndvar(), nsu=ndunc(), seed=NULL)}
\par\end{flushleft}

The interest lay in the possibility to re-run the model with various
dimensions or random seeds in one line.

<<sh11, echo=true, eval=false>>=
EC3 <- evalmcmod(modelEC3,nsv=100,nsu=10,seed=666)
EC4 <- evalmcmod(modelEC3,nsv=100,nsu=1000,seed=666)
@


\subsubsection{The \texttt{mcmodelcut} and the \texttt{evalmccut} Functions}

If you want to evaluate a high dimension model, R may reach its memory
limit. \texttt{evalmccut} evaluates a 2-dimensional Monte-Carlo model
(written with the \texttt{mcmodelcut} function) using a loop, calculates
and stores statistics in the uncertainty dimension for further analysis.
Readers should refer to the corresponding documentation for further
details. Our example would be written as: 

<<sh12, echo=true, eval=FALSE>>=
modEC4 <- mcmodelcut({
{cook <- mcstoc(rempiricalD, type = "V", values = c(0, 1/5, 1/50), 
                prob = c(0.027, 0.373, 0.6))
 serving <- mcstoc(rgamma, type = "V", shape = 3.93, rate = 0.0806)       
 conc <- mcstoc(rnorm, type = "U", mean = 10, sd = 2)       
 r <- mcstoc(runif, type = "U", min = 5e-04, max = 0.0015)     
}
## Second block 
{expo <- conc * cook * serving       
 dose <- mcstoc(rpois, type = "VU", lambda = expo)
 risk <- 1 - (1 - r)^dose
 res <- mc(zero,conc, cook, serving, expo, dose, r, risk)     }
## Third block 
{list(
  sum = summary(res),
  plot = plot(res, draw=FALSE),
  minmax = lapply(res,range),
  tor=tornado(res),
  et =  sapply(res,sd))
}
})
evalmccut(modEC4, nsv = 10001, nsu = 101, seed = 666,  progress.bar=TRUE)
@

Note that the use of a \texttt{tornado} function in the model should
be avoided since it slows considerably the \texttt{evalmccut} function.
The \texttt{tornado} function will be rewritten in the near future. 


\subsection{Studying an \texttt{mc} Object}

As a reminder, the \texttt{print} function provides a very basic summary
of the \texttt{mc} object. It has a \texttt{digits} argument (default:
3). Obviously, other more informative functions are provided in the
\texttt{mc2d} package. 


\subsubsection{The \texttt{summary} Function}

The \texttt{summary} function provide statistics on the \texttt{mc}
object: 

\noindent \begin{flushleft}
\texttt{summary(object, probs=c(0,0.025,0.25,0.5,0.75,0.975,1), lim=c(0.025,0.975),
...)}
\par\end{flushleft}

The mean, the standard deviation and the quantiles provided in the
\texttt{probs} arguments are evaluated on the variability dimension.
Then, the median and the quantiles provided in the \texttt{lim} argument
are evaluated on these statistics. Of course, these arguments should
be changed if other quantiles are needed.

<<sh14, echo=true, eval=true>>=
tmp <- summary(EC2,probs=c(0.995,0.999),digits=12)
tmp$risk
@


\subsubsection{The \texttt{hist} Function}

The \texttt{hist} provides an histogram of the different \texttt{mcnode}
of the \texttt{mc} object (cf. Figure \ref{fig:Function-hist}). 

\noindent \begin{flushleft}
\texttt{hist (x, griddim = NULL, xlab = names(x), ylab = \char`\"{}Frequency\char`\"{},
main = \char`\"{}\char`\"{}, ...)}
\par\end{flushleft}

In the current version, uncertainty and variability distributions
are collapsed. The histogram might be meaningless.

<<sh15, echo=true, eval=false, fig=false>>=
hist(EC2)
@

%
\begin{figure}
\caption{\selectlanguage{french}%
\label{fig:Function-hist}Function \texttt{hist}.\selectlanguage{english}
}


<<sh16, echo=false, eval=true, fig=true>>=
hist(EC2)
@
\end{figure}



\subsubsection{The \texttt{plot} function}

The \texttt{plot} function provides a graph of the empirical distribution
function of the estimate (mean or median) of the quantiles. 

\noindent \begin{flushleft}
\texttt{plot (x, prec = 0.01, stat = c(\char`\"{}median\char`\"{},
\char`\"{}mean\char`\"{}), lim = c(0.025,0.975), na.rm = TRUE, griddim
= NULL, xlab = NULL, ylab = \char`\"{}Fn(x)\char`\"{}, main = \char`\"{}\char`\"{},
draw = TRUE, ...)}
\par\end{flushleft}

For our example, see the Figure \ref{fig:Function-plot} as a default
graph.

<<sh17, echo=true, eval=false, fig=false>>=
plot(EC2)
@

%
\begin{figure}
\caption{\selectlanguage{french}%
\label{fig:Function-plot}\texttt{plot} Function .\selectlanguage{english}
}


<<sh18, echo=false, eval=true, fig=true>>=
plot(EC2)
@
\end{figure}


Note that \texttt{mcnode} objects have the same methods \texttt{print},
\texttt{summary}, \texttt{plot}, and \texttt{hist}. 


\subsubsection{The \texttt{tornado} function}

The \texttt{tornado} function builds the Spearman (default) rank correlation
between nodes of the \texttt{mc} object.

\noindent \begin{flushleft}
\texttt{tornado(x, output=length(x), use=\char`\"{}all.obs\char`\"{},
method=c(\char`\"{}spearman\char`\"{}, \char`\"{}kendall\char`\"{},\char`\"{}pearson\char`\"{}),
lim=c(0.025, 0.975))}
\par\end{flushleft}

where \texttt{output} is the \texttt{mcnode} (name or rank) of the
output (default: the last \texttt{mcnode}). Missing data are treated
using the \texttt{use} arguments (see the reference documentation).
\texttt{tornado} creates a \texttt{tornado} object with a \texttt{plot}
method (\emph{cf.} Figure \ref{fig:Function-plottor}).

<<sh19, echo=true, eval=true, fig=false>>=
torEC2 <- tornado(EC2)
plot(torEC2)
@

%
\begin{figure}
\caption{\selectlanguage{french}%
\label{fig:Function-plottor}\texttt{plot}.\texttt{tornado} Function
.\selectlanguage{english}
}


<<sh19b, echo=false, eval=true, fig=true>>=
plot(torEC2)
@
\end{figure}



\subsubsection{The \texttt{tornadounc} function}

The \texttt{tornadounc} explore the impact of the uncertainty on the
uncertainty of an output. It builds the Spearman (default) rank correlation
between statistics of the \texttt{mc} object calculated in the variability
dimension. 

\noindent \begin{flushleft}
\texttt{tornadounc(mc,output = length(mc), quant=c(0.5,0.75,0.975),
use = \char`\"{}all.obs\char`\"{}, method=c(\char`\"{}spearman\char`\"{},\char`\"{}kendall\char`\"{},\char`\"{}pearson\char`\"{}),
...)}
\par\end{flushleft}

The \texttt{quant} argument indicates which quantiles should be used
in the variability dimension. \texttt{tornadounc} creates a \texttt{tornadounc}
object with a \texttt{plot} method

<<sh19c, echo=true, eval=true, fig=false>>=
tornadounc(EC2, output="risk", quant=.99)
@

The output shows the impact of the uncertain nodes (type \char`\"{}U\char`\"{}
nodes) and some statistics (mean, median and, here, the $99^{\text{th}}$percentile)
calculated on the variability dimension (type \char`\"{}V\char`\"{}
and type \char`\"{}VU\char`\"{} nodes) on some statistics of the output.


\subsection{Other Functions and \texttt{mc} Objects}

\texttt{mc} objects are simply lists of three dimensional arrays;
within each arrays, values in a given columns represent variability
of the parameter.

Knowing the structure of the \texttt{mc} and the structure of the
\texttt{mcnode} objects, it is direct to apply any R function to these
objects. The \char`\"{}\texttt{\$}\char`\"{} function is helpful to
extract an \texttt{mcnode} from an \texttt{mc} object, the \texttt{unmc}
function removes all attributes, classes, and dimension equal to one,
providing a list of vectors, matrices and/or arrays.

Here is a (silly) example building a linear model (in fact \texttt{ndunc()}
linear models) between the \texttt{risk} and the \texttt{dose} within
each uncertainty dimension and studying some statistics on the coefficients.
This example is here only to show you that the whole power of R is
available for your analysis.

<<sh19ter, echo=true, eval=true>>=
tmp <- unmc(EC2, drop=TRUE)
dimu <- ncol(tmp$risk)
coef <- sapply(1:dimu, function(x) lm(tmp$risk[,x] ~ tmp$dose[,x])$coef) 
apply(coef,1,summary)
@


\section{\label{sec:Multivar}Multivariate Nodes}

The dimension \texttt{nvariates} is the third dimension of the \texttt{mcnode}.
One can use \texttt{mc2d} ignoring it. Nevertheless, its use is mandatory
to deal with some multivariate distributions, and it may be useful
in some circonstances. Building multivariate nodes is direct. We just
have to say that the following code:

<<sh19ter, echo=true, eval=false>>=
mcstoc(runif, nvariates=3, min=c(1,2,3),max=4)
@

will logically not provide a nodes with 3 variates, each having a
different limit. The recycling rule tells you that \texttt{c(1, 2,
3)} will be used in the first dimension, i.e. the variability dimension.
Use instead:

<<sh19quatr, echo=true, eval=true>>=
lim <- mcdata(c(1,2,3), type="0", nvariates=3)
mcstoc(runif, nvariates=3, min=lim,max=4)
@


\subsection{Multivariate Nodes for Multivariate Distributions}

The basic usage of multivariate nodes (and the reason why it has been
implemented) is for multivariate distributions such as the dirichlet
distribution, the multinomial distribution, the multinormal distribution
and, possibly, the empirical distribution 

As an example, assume that 3-member families buy 500 g of ground beef.
The proportion of steak eaten by the baby, his older brother and his
mom follow a Dirichlet (uncertainty) distribution of parameter $\alpha=(2,3,5)$.
You want to derive the distribution (variability) of steak eaten by
500 babies issued from these 500 families.

<<sh20, echo=true, eval=true>>=
(p <- mcstoc(rdirichlet, type="U", nsu=100, nvariates=3, alpha=c(2,3,5)))
s <- mcstoc(rmultinomial,type="VU", nsv=500, nsu=100, nvariates=3,size=500, prob=p)
summary(s)
@

Assume that each member of these families eat a {}``normal'' distribution
(variability) of steak with mean 100, 150 and 250 g. There is a positive
correlation between the serving of the children, and a negative one
with the one of the mother. You want to derive the distribution (variability)
of steak eaten by 500 babies.

<<sh21, echo=true, eval=true>>=
(x <- mcstoc(rmultinormal,type="V", nvariates=3, mean=c(100,150,250), 
                              sigma=c(10,2,-5,2,10,-5,-5,-5,10))) 
cor(x[,1,])
@

In this example, \texttt{mean} could be variable or uncertain, as
well as \texttt{sigma}%
\footnote{Caution: the use of a varying \texttt{sigma} would be very slow.%
}. You could have used, for an uncertain mean.

<<sh21, echo=true, eval=true>>=
m <- mcdata(c(100,150,250), type="0", nvariates=3)
mun <- mcstoc(rnorm, type="U", nvariates=3, mean=m, sd=20)
x <- mcstoc(rmultinormal, type="VU", nvariates=3, mean=mun, sigma=c(10,2,-5,2,10,-5,-5,-5,10))
cor(x[,1,])
@

The correlation is preserved, but the mean of each categories is known
with uncertainty.

Multivariate nodes may finally be useful to derive non parametric
bootstrap. Assume that, from a study, you obtained 6 individuals that
eat 100 g, 12 individuals that eat 150 g, 6 individuals that eat 170
g and 6 individuals that eat 200 g of ground beef. You want to derive
a non parametric bootstrap to derive uncertainty \cite{CULLEN-FREY-1999},
and then pick in the empirical distribution. 

<<sh22, echo=true, eval=true>>=
(x <- mcstoc(rempiricalD, type="U", outm=c('min','mean','max'), nvariates=30, 
              values=c(100,150,170,200),prob=c(6,12,6,6)))
mcstoc(rempiricalD,type="VU", values=x)
@

Printing the statistics of the 30 variates of \texttt{x} has no interest.
Instead, we use the {}``\texttt{outm}'' option which allows to specify
which output we want ({}``\texttt{none}'' for none, {}``\texttt{each}'',
the default, for a series of statistics for each variates, or, as
in the example, a vector of functions that are applied over all the
30 variates). 


\subsection{Multivariate Nodes as a {}``Third Dimension'' for Multiple Options
in a Model}

The recycling rules in \texttt{mc2d} regarding the \texttt{nvariate}
dimension is as following: the recycling will be done from \texttt{nvariates=1}
to \texttt{nvariates=n} with $n>1$. This allows to use the multivariates
nodes as a third dimension, in case you want to test various alternatives. 

Assume as in section \ref{sub:The-mcprobtree-function} that the distribution
reflecting the uncertainty on \texttt{conc} was not sure, and that
the microbiologists suggest that $conc\sim N\left(10,2\right)$ is
possible, but that $conc\sim U\left(8,12\right)$ is also possible.
We can \emph{i}) build a {}``bivariate'' node reflecting these two
options; ii) transfer these options until the final risk estimate.
We obtain a bivariate node for the risk, one using the first hypothesis,
the second the second hypothesis. 

<<sh23, echo=true>>=
conc1 <- mcstoc(rnorm, type="U", mean=10, sd=2)
conc2 <- mcstoc(runif, type="U", min=8, max=12)
conc <- mcdata(c(conc1,conc2),type="U",nvariates=2)

cook <- mcstoc(rempiricalD, type="V", values=c(1,1/5,1/50), prob=c(0.027,0.373,0.600))
serving <- mcstoc(rgamma,type="V",shape=3.93,rate=0.0806)
expo <- conc * cook * serving
dose <- mcstoc(rpois,type="VU",nvariates=2,lambda=expo)
r <- mcstoc(runif,type="U",min=0.0005,max=0.0015)
risk <- 1-(1-r)^dose
EC5 <- mc(conc,cook,serving,expo,dose,r,risk)
summary(EC5)
@

(Do not forget to transfer the number of variates you want in \texttt{mcstoc}...
(see the definition of \texttt{dose}). \texttt{mc2d} can not guess...)


\subsection{Multivariate Nodes as a {}``Third Dimension'' for Multiple Vectors/Contaminants}

The recycling rules in \texttt{mc2d} also allows to use the multivariate
nodes as a third dimension for multiple vectors/Contaminants. 

Assume  in our ground beef example that we have two contaminants:
one has a mean concentration that follows an uncertainty distribution
$conc\sim N\left(10,2\right)$, the second one $conc\sim N\left(14,2\right)$.
We can \emph{i}) build a {}``bivariate'' node reflecting these two
concentrations%
\footnote{Note that we could simulate a correlation between both contaminants
using a multinormal distribution.%
} ; \emph{ii}) transfer these options until the final dose; \emph{iii})
sum the dose over the variates (using \texttt{mcapply}). The behavior
of contaminants is transferred in the model. 

<<sh24, echo=true>>=
mconc <- mcdata(c(10,14), type="0", nvariates=2)
conc <- mcstoc(rnorm, nvariates=2, type="U", mean=mconc, sd=2)

cook <- mcstoc(rempiricalD, type="V", values=c(1,1/5,1/50), prob=c(0.027,0.373,0.600))
serving <- mcstoc(rgamma,type="V",shape=3.93,rate=0.0806)
expo <- conc * cook * serving
dose <- mcstoc(rpois,type="VU",nvariates=2,lambda=expo)
dosetot <- mcapply(dose, margin="variates", fun=sum)
r <- mcstoc(runif,type="U",min=0.0005,max=0.0015)
risk <- 1-(1-r)^dosetot
EC6 <- mc(conc,cook,serving,expo,dose,dosetot,r,risk)
summary(EC6)
@

As a conclusion, this \char`\"{}third\char`\"{} dimension is highly
flexible...


\section{Other Examples}


\subsection{A QRA of Waterborne Cryptosporidiosis in France}

This example is adapted from \cite{POUILLOT-2004}. The aim is to
evaluate the risk of infection with \emph{Cryptosporidium} \emph{parvum}
from consumption of tap-water, given that $n$ oocysts /100 l. have
been observed in a storage reservoir.


\subsubsection{Tap Water Consumption Model}

<<Crypto1, echo=false, eval=true>>=
library(mc2d)
inca <- structure(c(0, 22.08, 60, 64.4, 72, 82.8, 90, 96, 100, 110, 120,  137.5, 144, 150, 160, 162.5, 165, 180, 182.5, 184, 192, 192.5,  200, 216, 220, 225, 230, 240, 250, 264, 270, 276, 288, 290, 300,  304, 312.8, 320, 322, 325, 330, 336, 340, 350, 360, 370, 375,  380, 384, 390, 400, 414, 420, 425, 430, 432, 432.5, 440, 442,  450, 456, 460, 460.8, 464, 470, 470.4, 480, 490, 500, 504, 510,  510.4, 516, 520, 525, 525.6, 528, 530, 540, 544, 550, 552, 560,  562, 565, 570, 576, 580, 582.5, 584, 585.6, 590, 596, 600, 606,  610, 614, 620, 625, 630, 635.4, 640, 648, 650, 656.2, 660, 664.4,  670, 670.4, 672, 675, 680, 682, 690, 696, 700, 710, 716, 720,  730, 730.4, 740, 744, 750, 756, 760, 774.8, 780, 784, 792, 796,  800, 810, 820, 828, 830, 840, 850, 850.4, 860, 864, 866.4, 870,  880, 890, 900, 908, 910, 915.2, 920, 930, 936, 950, 960, 970,  980, 984, 986.4, 990, 996, 1000, 1015.2, 1020, 1028, 1032, 1036,  1040, 1042, 1050, 1070, 1075, 1078.8, 1080, 1090, 1096, 1100,  1110, 1120, 1126.4, 1128, 1130, 1140, 1148, 1150, 1152, 1160,  1170, 1175, 1176.2, 1190, 1196, 1200, 1214, 1220, 1230, 1240,  1248, 1250, 1260, 1276, 1280, 1290, 1296, 1300, 1320, 1322, 1330,  1340, 1350, 1360, 1370, 1386.4, 1400, 1410, 1414, 1420, 1430,  1440, 1446, 1450, 1460, 1480, 1500, 1520, 1530, 1550, 1560, 1600,  1650, 1680, 1696, 1700, 1710, 1720, 1750, 1760, 1800, 1830, 1840,  1850, 1900, 1920, 1936, 1954, 1980, 1990, 2000, 2014, 2050, 2100,  2200, 2220, 2248, 2250, 2276, 2300, 2310, 2340, 2400, 2550, 2568,  2700, 2720, 2784, 2820, 2876, 3000, 3100, 3108, 3200, 2578, 7,  1, 8, 14, 3, 1, 1, 10, 1, 250, 1, 2, 120, 8, 6, 1, 5, 3, 12,  5, 5, 375, 2, 8, 7, 41, 408, 53, 4, 24, 7, 3, 2, 217, 1, 1, 44,  9, 1, 31, 1, 1, 17, 294, 5, 3, 9, 3, 12, 525, 5, 23, 1, 3, 4,  1, 28, 3, 154, 2, 5, 1, 2, 6, 1, 299, 8, 148, 1, 2, 1, 1, 8,  3, 1, 2, 14, 20, 1, 18, 2, 20, 6, 1, 8, 2, 8, 1, 1, 1, 4, 1,  487, 3, 5, 1, 7, 1, 5, 1, 24, 3, 17, 1, 42, 1, 2, 1, 1, 1, 16,  1, 3, 1, 30, 4, 1, 183, 4, 1, 5, 1, 141, 1, 14, 1, 12, 1, 2,  1, 206, 6, 2, 1, 4, 92, 10, 1, 5, 1, 3, 5, 5, 2, 87, 1, 1, 1,  5, 5, 4, 4, 78, 1, 3, 2, 1, 16, 1, 133, 1, 5, 1, 1, 1, 4, 1,  43, 1, 1, 1, 30, 1, 1, 7, 2, 6, 1, 1, 3, 3, 1, 10, 1, 5, 1, 1,  1, 1, 1, 159, 2, 1, 1, 10, 1, 16, 4, 2, 5, 3, 1, 3, 11, 4, 1,  2, 12, 5, 1, 1, 44, 3, 2, 1, 2, 17, 1, 4, 1, 1, 17, 1, 1, 3,  4, 18, 14, 4, 1, 2, 1, 1, 1, 2, 12, 1, 2, 1, 1, 1, 1, 1, 3, 1,  20, 1, 1, 1, 7, 1, 1, 3, 1, 2, 2, 1, 6, 1, 1, 1, 1, 1, 1, 1,  2, 1, 1, 2), .Dim = c(270L, 2L))
inca <- rep(inca[,1],inca[,2])/1000 
@

We own row data of daily cunsomption of tap water from 1,180 tap water
consumers (var \texttt{inca}, see Figure \ref{fig:Function-inca}).
We could choose to use this empirical distribution:

%
\begin{figure}
\caption{\selectlanguage{french}%
\label{fig:Function-inca}Histogram of daily tap water intake\selectlanguage{english}
}


<<Crypto2, echo=false, eval=true, fig=true>>=
hist(inca, xlab="l/day",freq=FALSE,main="") 
@
\end{figure}


<<Crypto3, echo=true>>=
ndvar(1001);ndunc(1001)
mcstoc(rempiricalD,type="V",values=inca)
@

but we will use the \char`\"{}\texttt{fitdistrplus}\char`\"{} library.
\texttt{inca} includes a lot of \texttt{0}, corresponding to days
when individuals do not drink tap water (possibly bottled water).
We could try a mixture of distributions, with \texttt{0} and non-\texttt{0}. 

<<Crypto4, echo=true, figure=false>>=
library(specdist) 
pnonzero <- sum(inca!=0)/length(inca)
descdist(inca[inca!=0])
@

%
\begin{figure}
\caption{\selectlanguage{french}%
\label{fig:Function-descdist}Graph from the \texttt{descdist} function. \selectlanguage{english}
}


<<Crypto5, echo=false, eval=true, fig=true>>=
descdist(inca[inca!=0])
@
\end{figure}


Following the \texttt{descdist} function (See figure \ref{fig:Function-descdist}),
let us try the gamma distribution. 

<<Crypto6, echo=true, figure=false>>=
gam <- mledist(inca[inca!=0],"gamma")
summary(gam)
plot(gam)
@

%
\begin{figure}
\caption{\selectlanguage{french}%
\label{fig:Function-mledist}Graph from the \texttt{descdist} function. \selectlanguage{english}
}


<<Crypto7, echo=false, eval=true, fig=true>>=
plot(gam)
@
\end{figure}


Not so bad (See Figure \ref{fig:Function-mledist}), and not worse
than a lognormal distribution (results not shown). We can now rebuild
our mixture. For simplicity, we will not consider uncertainty around
the estimates.

<<Crypto8, echo=true, figure=false>>=
conso0 <- mcdata(0,type="V")
conso1 <- mcstoc(rgamma,type="V",shape=gam$est[1],rate=gam$est[2])
mcswitch <- mcstoc(rbern,type="V",prob=pnonzero)
v <- mcprobtree(mcswitch, list("0"=conso0,"1"=conso1), type = "V")
summary(v)
@


\subsubsection{The Dose-Response Model}

We propose a boostrap from data (\texttt{datDR}) issued from \cite{CHAPPELL-1996}.

<<Crypto9, echo=true, figure=false>>=
datDR <- list(   dose=c(30,100,300,500,1000,10000,100000,1000000),
                 pi=c(2,4,2,5,2,3,1,1),
                 ni=c(5,8,3,6,2,3,1,1))

estDR <- function(dat,ref){
   -glm(cbind(ref$ni-dat,dat) ~ ref$dose + 0,binomial(link="log"))$coefficients}

laDR <- function(dat,iter){
   ml <- 1-exp(-estDR(dat$pi,dat)*datDR$dose)
   boot <- matrix(rbinom(length(datDR$dose)*iter,datDR$ni,ml),nrow=length(datDR$dose))
   apply(boot,2,estDR,ref=dat)}
bootr <- laDR(datDR,ndunc()) 
r <- mcdata(bootr, type="U")
summary(r)
@


\subsubsection{The Model}

Deriving the final model is direct. We build the \texttt{mcnode} corresponding
to the recovery rate (Uncertainty,\texttt{ Rr}), the probability for
an oocyst to be infective (Variability, \texttt{w}): 

<<Crypto10, echo=true, figure=false>>=
Rr <- mcstoc(rbeta, type="U", shape1=2.65, shape2=3.64)
w <- mcstoc(rbeta, type="V", shape1=2.6, shape2=3.4) 
@

Given that $n=2$ oocysts are observed in 100 l of water, the expected
number of oocysts in the sample is \texttt{l}: 

<<Crypto11, echo=true, figure=false>>=
Oo <- 2
l <- (Oo + mcstoc(rnbinom, type="U", size=Oo+1, prob=Rr))/100
@

The expected number of oocysts drunk by the individuals is \texttt{Or}
and the risk ($\times10000$) is estimated by:

<<Crypto12, echo=true, figure=false>>=
Or <- l * v * w
P <- 10000 * (1-exp(-r*Or))
summary(P)
@ 

To be compared to the results obtained in the Table 2 in \cite{POUILLOT-2004}. 

Improvement: the results for $n=\left\{ 0,1,2,5,10,20,50,100,1000\right\} $
can be obtained in one step using: 

<<Crypto13, echo=true, figure=false>>=
Oo <- mcdata(c(0,1,2,5,10,20,50,100,1000),type="0",nvariates=9) 
@ 


\section*{As a Conclusion}

We think and hope that {}``\texttt{mc2d}'' could help risk assessors
to build or study their models, and that it may help developing the
use of \char`\"{}Two-dimensional\char`\"{} simulation. Nevertheless,
\char`\"{}\texttt{mc2d}\char`\"{} is currently under development and 

\noindent \begin{center}
\emph{CHECK CAREFULLY YOUR MODEL AND RESULTS TO TRACK THE BUGS. }
\par\end{center}

Please refer any commentary or bugs to \url{rpouillot@yahoo.fr}.

\bibliographystyle{plain}
\bibliography{Bibtex}

\end{document}
